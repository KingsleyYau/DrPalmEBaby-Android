package com.drcom.drpalm.objs;

import android.content.Context;
import android.content.SharedPreferences;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

import java.io.UnsupportedEncodingException;
import java.util.UUID;

import com.drcom.drpalm.Tool.service.DrPushServiceJni;

/**
 * 以ANDROID_ID为基础，
 * 在获取失败时以TelephonyManager.getDeviceId()为备选方法，
 * 如果再失败，调用C代码,先试取设置ID,没则使用MAC地址.
 * 如果再失败，使用UUID的生成策略
 * @author Administrator
 *
 */
public class DeviceUuidFactory {
    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";

    protected static UUID uuid;


    public DeviceUuidFactory(Context context) {

        if( uuid ==null ) {
            synchronized (DeviceUuidFactory.class) {
                if( uuid == null) {
                    final SharedPreferences prefs = context.getSharedPreferences( PREFS_FILE, 0);
                    final String id = prefs.getString(PREFS_DEVICE_ID, null );

                    if (id != null) {
                        // Use the ids previously computed and stored in the prefs file
                        uuid = UUID.fromString(id);

                    } else {

                        final String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);

                        // Use the Android ID unless it's broken, in which case fallback on deviceId,
                        // unless it's not available, then fallback on a random number which we store
                        // to a prefs file
                        try {
                            if (!"9774d56d682e549c".equals(androidId)) {
                                uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
                            } else {
                                String deviceId = ((TelephonyManager) context.getSystemService( Context.TELEPHONY_SERVICE )).getDeviceId();
                                if(deviceId == null){
                                	// 取设备ID (先使用设置ID,没则使用MAC地址)
                                	DrPushServiceJni dsj = new DrPushServiceJni();
                                	deviceId = dsj.GetDeviceId();
                                }
                                uuid = deviceId!=null ? UUID.nameUUIDFromBytes(deviceId.getBytes("utf8")) : UUID.randomUUID();
                            }
                        } catch (UnsupportedEncodingException e) {
                            throw new RuntimeException(e);
                        }

                        // Write the value out to the prefs file
                        prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString() ).commit();

                    }

                }
            }
        }

    }


    /**
     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
     * to be unique across all Android devices.  Much more so than ANDROID_ID is.
     *
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
     * usable value.
     *
     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
     *
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset.  Something to be aware of.
     *
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     *
     * @see http://code.google.com/p/android/issues/detail?id=10603
     *
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
    public UUID getDeviceUuid() {
        return uuid;
    }
    
    /**
     * 取设备ID (先使用设置ID,没则使用MAC地址)
     * @return
     */
    public String getDeviceMac(){
    	DrPushServiceJni dsj = new DrPushServiceJni();
    	return dsj.GetDeviceId();
    }
    
    /**
     * 取Tokenid(注册PUSH用)
     * @return
     */
    public String getTokenid(String deviceid,String packagename){
    	DrPushServiceJni dsj = new DrPushServiceJni();
    	return dsj.GetTokenId(deviceid, packagename);
    }
    
    
//	// 获取机器唯一标识号
//	static public String getDeviceId2222(Context context) {
//		String deviceid = "";
//		TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
//		deviceid = telephonyManager.getDeviceId();
//		if (deviceid == null) {
//			WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
//			if (wifi != null) {
//				WifiInfo info = wifi.getConnectionInfo();
//				if (info != null) {
//					deviceid = info.getMacAddress();
//				}
//			}
//		}
//		return deviceid;
//	}
}

